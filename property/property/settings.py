"""
Django settings for property project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
from dotenv import load_dotenv
from celery.schedules import crontab

TESTING = bool(os.environ.get("PYTEST_CURRENT_TEST"))

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env
load_dotenv(BASE_DIR / ".env")

# Cache TTL for geocode results (seconds)
GEO_CACHE_TTL_SECONDS = 60 * 60 * 24 * 7  # 7 days

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-_qgif_5w0pmw8juvw!vk(a^^l3k!@ffmtut!s2@1#qjv2hrl7y'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

STRIPE_SECRET_KEY = os.getenv("STRIPE_SECRET_KEY", "")
STRIPE_PUBLISHABLE_KEY = os.getenv("STRIPE_PUBLISHABLE_KEY", "")
STRIPE_WEBHOOK_SECRET = os.getenv("STRIPE_WEBHOOK_SECRET", "")
SITE_URL = os.getenv("SITE_URL", "http://127.0.0.1:8000")

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    'propertylist_app.apps.PropertylistAppConfig',

    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",

    "django_filters",
    "corsheaders",
    
    'drf_spectacular',
    "notifications.apps.NotificationsConfig",
  
    
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = 'property.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'property.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-uk'

TIME_ZONE = "Europe/London"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.AllowAny",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 10,

    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.UserRateThrottle",
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.ScopedRateThrottle",
    ],
    # "DEFAULT_THROTTLE_RATES": {
    #     "user": "1000/day",
    #     "anon": "1000/day",
    #     "login": "100/hour" if not TESTING else "10000/hour",
    #     "register_anon": "20/hour" if not TESTING else "10000/hour",
    #     "message_user": "2/hour",
    #     "messaging": "100/hour" if not TESTING else "10000/hour",
    #     "review-detail": "100/hour" if not TESTING else "10000/hour",
    #     "report-create": "10/hour" if not TESTING else "10000/hour",
    #     "password-reset": "10/hour" if not TESTING else "10000/hour",
    #     "password-reset-confirm": "10/hour" if not TESTING else "10000/hour",
    # },
    
     "DEFAULT_THROTTLE_RATES": {
        "user": "10000/hour",
        "anon": "10000/hour",
        "login": "10000/hour",
        "register": "10000/hour",
        "register_anon": "10000/hour",
        "message_user": "10000/hour",
        "messaging": "10000/hour",
        "review-create": "10000/hour",
        "review-detail": "10000/hour",
        "password-reset": "10000/hour",
        "password-reset-confirm": "10000/hour",
        "report-create": "10000/hour",
        "moderation": "10000/hour",
    },
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.OrderingFilter",  # ‚Üê add this
    ],
    
    
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 20,
    "DEFAULT_RENDERER_CLASSES": (
        "rest_framework.renderers.JSONRenderer",
    ),
    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.URLPathVersioning",
    "DEFAULT_VERSION": "v1",
    "ALLOWED_VERSIONS": ["v1", "v2"],
    "VERSION_PARAM": "version",

    # Use Spectacular to generate the OpenAPI schema
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",

    "EXCEPTION_HANDLER": "propertylist_app.api.exceptions.custom_exception_handler",
}

SPECTACULAR_SETTINGS = {
    "TITLE": "RentOut API",
    "DESCRIPTION": "SpareRoom-style listings, bookings, chat, payments, and moderation.",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,  # keep schema at /api/schema/
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=15),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "AUTH_HEADER_TYPES": ("Bearer",),
}

# --- Security/Abuse controls ---
# Toggle CAPTCHA for sensitive endpoints (login/register/password-reset, report)
ENABLE_CAPTCHA = os.getenv("ENABLE_CAPTCHA", "false").lower() in {"1", "true", "yes"}

# Choose "recaptcha" or "hcaptcha" if you wire a real provider later.
CAPTCHA_PROVIDER = os.getenv("CAPTCHA_PROVIDER", "recaptcha")
CAPTCHA_SECRET   = os.getenv("CAPTCHA_SECRET", "")   # e.g., reCAPTCHA secret key

# Login attempt lockout (independent of DRF throttling)
LOGIN_FAIL_LIMIT = int(os.getenv("LOGIN_FAIL_LIMIT", "5"))              # after 5 failed attempts
LOGIN_LOCKOUT_SECONDS = int(os.getenv("LOGIN_LOCKOUT_SECONDS", "900"))  # 15 minutes

# allow only the origins you actually use
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
DEFAULT_FROM_EMAIL = "no-reply@rentout.local"

ALLOWED_HOSTS = ["127.0.0.1", "localhost", ".ngrok-free.dev", ".ngrok-free.app", ".ngrok.io"]
LANGUAGE_CODE = "en-gb"
TIME_ZONE = "Europe/London"
USE_I18N = True
USE_TZ = True

# --- Media config  ---
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

#  MEDIA POLICY (used by validators)
MAX_IMAGE_BYTES = int(os.getenv("MAX_IMAGE_BYTES", str(5 * 1024 * 1024)))  # 5 MB
ALLOWED_IMAGE_FORMATS = {"JPEG", "JPG", "PNG", "WEBP"}  # Pillow formats
MAX_IMAGE_PIXELS = int(os.getenv("MAX_IMAGE_PIXELS", "40000000"))  # 40 MP safety fuse


# --- Toggle S3 in production via env ---
USE_S3 = os.getenv("USE_S3", "false").lower() in {"1", "true", "yes"}

# OPTIONAL S3 STORAGE (enable with USE_S3=true in .env)
USE_S3 = os.getenv("USE_S3", "false").lower() in {"1", "true", "yes"}

if USE_S3:
    INSTALLED_APPS += ["storages"]  # requires django-storages
    DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"

    AWS_STORAGE_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME", "")
    AWS_S3_REGION_NAME = os.getenv("AWS_S3_REGION_NAME", "eu-west-2")
    AWS_S3_SIGNATURE_VERSION = "s3v4"
    AWS_S3_ADDRESSING_STYLE = "virtual"
    AWS_S3_FILE_OVERWRITE = False
    AWS_DEFAULT_ACL = None

    # Signed URLs for private media (avatars/exports)
    AWS_QUERYSTRING_AUTH = True
    AWS_QUERYSTRING_EXPIRE = int(os.getenv("AWS_QUERYSTRING_EXPIRE", "900"))  # 15 minutes

    AWS_S3_OBJECT_PARAMETERS = {
        "ServerSideEncryption": "AES256",
        "CacheControl": "max-age=86400, s-maxage=86400",
    }

    # Optional: if using CloudFront or custom domain
    AWS_S3_CUSTOM_DOMAIN = os.getenv("AWS_S3_CUSTOM_DOMAIN", "")


# --- Media policy knobs used by validators ---
MAX_IMAGE_BYTES = int(os.getenv("MAX_IMAGE_BYTES", str(5 * 1024 * 1024)))  # 5MB
ALLOWED_IMAGE_FORMATS = {"JPEG", "JPG", "PNG", "WEBP"}  # Pillow formats (JPG treated as JPEG)
MAX_IMAGE_PIXELS = int(os.getenv("MAX_IMAGE_PIXELS", "40000000"))  # 40 MP safety fuse


# --- Webhook secrets (read from environment) ---
# Example env vars:
#   WEBHOOK_SECRET=dev_default_secret
#   STRIPE_WEBHOOK_SECRET=whsec_xxx

WEBHOOK_SECRETS = {
    "default": os.environ.get("WEBHOOK_SECRET", ""),           # fallback for unknown providers
    "stripe":  os.environ.get("STRIPE_WEBHOOK_SECRET", ""),    # Stripe specific
}
# Later, set the variables in your OS or .env (but don‚Äôt commit secrets).


# settings.py (add this)
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "throttle-cache",
    }
}

# --- GDPR policy knobs ---
GDPR_RETENTION = {
    "export_link_days": 7,   # Expire export links after 7 days
}
GDPR_HASH_SALT = os.getenv("GDPR_HASH_SALT", "change-this-in-prod")

# Celery (example; tune for your environment)
CELERY_BROKER_URL = "redis://localhost:6379/0"
CELERY_RESULT_BACKEND = "redis://localhost:6379/1"
CELERY_TASK_ALWAYS_EAGER = False  # True only in certain tests if you want synchronous behavior
CELERY_TASK_TIME_LIMIT = 60
CELERY_TASK_SOFT_TIME_LIMIT = 45



# --- Celery (safe to import even if Celery not installed yet) ---
CELERY_BROKER_URL = "redis://localhost:6379/0"
CELERY_RESULT_BACKEND = "redis://localhost:6379/1"
CELERY_TASK_ALWAYS_EAGER = False
CELERY_TASK_TIME_LIMIT = 60
CELERY_TASK_SOFT_TIME_LIMIT = 45

# Route classes of tasks to separate queues (optional but helpful)
CELERY_TASK_ROUTES = {
    "notifications.tasks.*": {"queue": "emails"},
    "propertylist_app.tasks.task_send_new_message_email": {"queue": "emails"},
    "propertylist_app.expire_paid_listings": {"queue": "maintenance"},
}

# If you prefer, you can also declare queues, but Celery will create them on demand.


try:
    from celery.schedules import crontab
    CELERY_BEAT_SCHEDULE = {
        "send-due-notifications-every-minute": {
            "task": "notifications.tasks.send_due_notifications",
            "schedule": crontab(minute="*"),
        },
        "notify-listing-expiring-daily-7am": {
            "task": "notifications.tasks.notify_listing_expiring",
            "schedule": crontab(hour=7, minute=0),
        },
        # Add alongside your other two entries
        "expire-paid-listings-daily-03:00": {
        "task": "propertylist_app.expire_paid_listings",
        "schedule": crontab(hour=3, minute=0),
},

    }
except Exception:
    # Celery not installed yet? No problem ‚Äî run without beat for now.
    CELERY_BEAT_SCHEDULE = {}
    
    
# ---- Caching knobs ----
CACHE_KEY_PREFIX = "rentout"
CACHE_DEFAULT_TTL = 60  # seconds; safe default for list/detail
CACHE_SEARCH_TTL = 120  # seconds; search is slightly longer
    
    



